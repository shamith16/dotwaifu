package shell

import (
	"fmt"
	"os"
)

func GenerateRCContent(shell string, isExisting bool) string {
	comment := GetShellComment(shell)

	configRoot := "$HOME/.config/dotwaifu"

	loadingLogic := fmt.Sprintf(`DOTWAIFU_CONFIG_ROOT="%s"

# Load core configurations
for config in "$DOTWAIFU_CONFIG_ROOT"/shell/shared/core/*.sh; do
    [ -r "$config" ] && source "$config"
done

# Load project-specific configurations
for project_dir in "$DOTWAIFU_CONFIG_ROOT"/shell/shared/projects/*/; do
    [ -d "$project_dir" ] || continue
    for config in "$project_dir"*.sh; do
        [ -r "$config" ] && source "$config"
    done
done`, configRoot)

	if isExisting {
		return fmt.Sprintf(`
# === dotwaifu Configuration (Added by dotwaifu) ===
%s
# === End dotwaifu Configuration ===`, loadingLogic)
	}

	return fmt.Sprintf(`%s
# Generated by dotwaifu - DO NOT EDIT MANUALLY
# Edit files in ~/.config/dotwaifu/shell/shared/ instead

%s`, comment, loadingLogic)
}

func BackupExistingRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	backupPath := GetBackupPath(shell)

	content, err := os.ReadFile(rcPath)
	if err != nil {
		return err
	}

	return os.WriteFile(backupPath, content, 0644)
}

func AppendToExistingRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	content := GenerateRCContent(shell, true)

	file, err := os.OpenFile(rcPath, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString(content)
	return err
}

func CreateNewRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	content := GenerateRCContent(shell, false)

	return os.WriteFile(rcPath, []byte(content), 0644)
}

func RemoveIntegration(shell string) error {
	rcPath := GetRCFilePath(shell)
	backupPath := GetBackupPath(shell)

	if _, err := os.Stat(backupPath); err == nil {
		return os.Rename(backupPath, rcPath)
	}

	return os.Remove(rcPath)
}