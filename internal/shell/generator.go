package shell

import (
	"fmt"
	"os"
	"strings"
)

func GenerateRCContent(shell string, isExisting bool) string {
	comment := GetShellComment(shell)

	configRoot := "$HOME/.config/dotwaifu"

	loadingLogic := fmt.Sprintf(`DOTWAIFU_CONFIG_ROOT="%s"

# Load core configurations
for config in "$DOTWAIFU_CONFIG_ROOT"/shell/shared/core/*.sh; do
    [ -r "$config" ] && source "$config"
done

# Load project-specific configurations
for project_dir in "$DOTWAIFU_CONFIG_ROOT"/shell/shared/projects/*/; do
    [ -d "$project_dir" ] || continue
    for config in "$project_dir"*.sh; do
        [ -r "$config" ] && source "$config"
    done
done`, configRoot)

	if isExisting {
		return fmt.Sprintf(`
# === dotwaifu Configuration (Added by dotwaifu) ===
%s
# === End dotwaifu Configuration ===`, loadingLogic)
	}

	return fmt.Sprintf(`%s
# Generated by dotwaifu - DO NOT EDIT MANUALLY
# Edit files in ~/.config/dotwaifu/shell/shared/ instead

%s`, comment, loadingLogic)
}

func BackupExistingRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	backupPath := GetBackupPath(shell)

	content, err := os.ReadFile(rcPath)
	if err != nil {
		return err
	}

	return os.WriteFile(backupPath, content, 0644)
}

func AppendToExistingRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	content := GenerateRCContent(shell, true)

	file, err := os.OpenFile(rcPath, os.O_APPEND|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString(content)
	return err
}

func CreateNewRC(shell string) error {
	rcPath := GetRCFilePath(shell)
	content := GenerateRCContent(shell, false)

	return os.WriteFile(rcPath, []byte(content), 0644)
}

func RemoveIntegration(shell string) error {
	rcPath := GetRCFilePath(shell)
	backupPath := GetBackupPath(shell)

	// If backup exists, restore it
	if _, err := os.Stat(backupPath); err == nil {
		return os.Rename(backupPath, rcPath)
	}

	// If no backup exists, try to strip just the dotwaifu integration block
	content, err := os.ReadFile(rcPath)
	if err != nil {
		// If we can't read the file, it might not exist - that's ok
		return nil
	}

	contentStr := string(content)

	// Remove the dotwaifu integration block
	startMarker := "# === dotwaifu Configuration (Added by dotwaifu) ==="
	endMarker := "# === End dotwaifu Configuration ==="

	startIdx := strings.Index(contentStr, startMarker)
	if startIdx == -1 {
		// No integration block found, file might be generated by dotwaifu
		// Check if it's completely generated (starts with shell comment and "Generated by dotwaifu")
		if strings.Contains(contentStr, "# Generated by dotwaifu - DO NOT EDIT MANUALLY") {
			// This is a dotwaifu-generated file, safe to remove
			return os.Remove(rcPath)
		}
		// No dotwaifu integration found, leave file as-is
		return nil
	}

	endIdx := strings.Index(contentStr[startIdx:], endMarker)
	if endIdx == -1 {
		// Malformed integration, can't safely remove
		return fmt.Errorf("malformed dotwaifu integration found in %s", rcPath)
	}

	// Remove the integration block
	before := contentStr[:startIdx]
	after := contentStr[startIdx+endIdx+len(endMarker):]

	// Clean up extra newlines
	cleanedContent := strings.TrimSpace(before + after)
	if cleanedContent != "" {
		cleanedContent += "\n"
	}

	return os.WriteFile(rcPath, []byte(cleanedContent), 0644)
}